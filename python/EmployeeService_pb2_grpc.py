# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import EmployeeService_pb2 as EmployeeService__pb2


class EmployeeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateEmployee = channel.unary_unary(
                '/employee_service.EmployeeService/CreateEmployee',
                request_serializer=EmployeeService__pb2.EmployeeData.SerializeToString,
                response_deserializer=EmployeeService__pb2.StatusReply.FromString,
                )
        self.GetEmployeeDataFromID = channel.unary_unary(
                '/employee_service.EmployeeService/GetEmployeeDataFromID',
                request_serializer=EmployeeService__pb2.EmployeeID.SerializeToString,
                response_deserializer=EmployeeService__pb2.EmployeeData.FromString,
                )
        self.UpdateEmployeeTitle = channel.unary_unary(
                '/employee_service.EmployeeService/UpdateEmployeeTitle',
                request_serializer=EmployeeService__pb2.EmployeeTitleUpdate.SerializeToString,
                response_deserializer=EmployeeService__pb2.StatusReply.FromString,
                )
        self.DeleteEmployee = channel.unary_unary(
                '/employee_service.EmployeeService/DeleteEmployee',
                request_serializer=EmployeeService__pb2.EmployeeID.SerializeToString,
                response_deserializer=EmployeeService__pb2.StatusReply.FromString,
                )
        self.ListAllEmployees = channel.unary_unary(
                '/employee_service.EmployeeService/ListAllEmployees',
                request_serializer=EmployeeService__pb2.EmptyMessage.SerializeToString,
                response_deserializer=EmployeeService__pb2.EmployeeDataList.FromString,
                )
        self.ListAllTitles = channel.unary_unary(
                '/employee_service.EmployeeService/ListAllTitles',
                request_serializer=EmployeeService__pb2.EmptyMessage.SerializeToString,
                response_deserializer=EmployeeService__pb2.EmployeeTitleList.FromString,
                )
        self.ListAllEmployeesByTitle = channel.unary_unary(
                '/employee_service.EmployeeService/ListAllEmployeesByTitle',
                request_serializer=EmployeeService__pb2.EmployeeTitle.SerializeToString,
                response_deserializer=EmployeeService__pb2.EmployeeNameList.FromString,
                )


class EmployeeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateEmployee(self, request, context):
        """Create an employee record
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEmployeeDataFromID(self, request, context):
        """Get an employee´s data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEmployeeTitle(self, request, context):
        """Update an employee´s title/position
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEmployee(self, request, context):
        """Delete an employee
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAllEmployees(self, request, context):
        """List all employees
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAllTitles(self, request, context):
        """List all titles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAllEmployeesByTitle(self, request, context):
        """List all employees by title
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmployeeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateEmployee': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEmployee,
                    request_deserializer=EmployeeService__pb2.EmployeeData.FromString,
                    response_serializer=EmployeeService__pb2.StatusReply.SerializeToString,
            ),
            'GetEmployeeDataFromID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEmployeeDataFromID,
                    request_deserializer=EmployeeService__pb2.EmployeeID.FromString,
                    response_serializer=EmployeeService__pb2.EmployeeData.SerializeToString,
            ),
            'UpdateEmployeeTitle': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEmployeeTitle,
                    request_deserializer=EmployeeService__pb2.EmployeeTitleUpdate.FromString,
                    response_serializer=EmployeeService__pb2.StatusReply.SerializeToString,
            ),
            'DeleteEmployee': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEmployee,
                    request_deserializer=EmployeeService__pb2.EmployeeID.FromString,
                    response_serializer=EmployeeService__pb2.StatusReply.SerializeToString,
            ),
            'ListAllEmployees': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAllEmployees,
                    request_deserializer=EmployeeService__pb2.EmptyMessage.FromString,
                    response_serializer=EmployeeService__pb2.EmployeeDataList.SerializeToString,
            ),
            'ListAllTitles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAllTitles,
                    request_deserializer=EmployeeService__pb2.EmptyMessage.FromString,
                    response_serializer=EmployeeService__pb2.EmployeeTitleList.SerializeToString,
            ),
            'ListAllEmployeesByTitle': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAllEmployeesByTitle,
                    request_deserializer=EmployeeService__pb2.EmployeeTitle.FromString,
                    response_serializer=EmployeeService__pb2.EmployeeNameList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'employee_service.EmployeeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EmployeeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateEmployee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee_service.EmployeeService/CreateEmployee',
            EmployeeService__pb2.EmployeeData.SerializeToString,
            EmployeeService__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEmployeeDataFromID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee_service.EmployeeService/GetEmployeeDataFromID',
            EmployeeService__pb2.EmployeeID.SerializeToString,
            EmployeeService__pb2.EmployeeData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateEmployeeTitle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee_service.EmployeeService/UpdateEmployeeTitle',
            EmployeeService__pb2.EmployeeTitleUpdate.SerializeToString,
            EmployeeService__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteEmployee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee_service.EmployeeService/DeleteEmployee',
            EmployeeService__pb2.EmployeeID.SerializeToString,
            EmployeeService__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAllEmployees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee_service.EmployeeService/ListAllEmployees',
            EmployeeService__pb2.EmptyMessage.SerializeToString,
            EmployeeService__pb2.EmployeeDataList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAllTitles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee_service.EmployeeService/ListAllTitles',
            EmployeeService__pb2.EmptyMessage.SerializeToString,
            EmployeeService__pb2.EmployeeTitleList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAllEmployeesByTitle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee_service.EmployeeService/ListAllEmployeesByTitle',
            EmployeeService__pb2.EmployeeTitle.SerializeToString,
            EmployeeService__pb2.EmployeeNameList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
