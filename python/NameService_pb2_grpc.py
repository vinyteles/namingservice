# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import NameService_pb2 as NameService__pb2


class NameServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterServer = channel.unary_unary(
                '/name_service.NameService/RegisterServer',
                request_serializer=NameService__pb2.ServerData.SerializeToString,
                response_deserializer=NameService__pb2.StatusReply.FromString,
                )
        self.UnregisterServer = channel.unary_unary(
                '/name_service.NameService/UnregisterServer',
                request_serializer=NameService__pb2.ServerName.SerializeToString,
                response_deserializer=NameService__pb2.StatusReply.FromString,
                )
        self.LookupServer = channel.unary_unary(
                '/name_service.NameService/LookupServer',
                request_serializer=NameService__pb2.ServerName.SerializeToString,
                response_deserializer=NameService__pb2.ServerData.FromString,
                )


class NameServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterServer(self, request, context):
        """Register Server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterServer(self, request, context):
        """Unregister Server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookupServer(self, request, context):
        """Find server by name
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NameServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterServer': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterServer,
                    request_deserializer=NameService__pb2.ServerData.FromString,
                    response_serializer=NameService__pb2.StatusReply.SerializeToString,
            ),
            'UnregisterServer': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterServer,
                    request_deserializer=NameService__pb2.ServerName.FromString,
                    response_serializer=NameService__pb2.StatusReply.SerializeToString,
            ),
            'LookupServer': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupServer,
                    request_deserializer=NameService__pb2.ServerName.FromString,
                    response_serializer=NameService__pb2.ServerData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'name_service.NameService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NameService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/name_service.NameService/RegisterServer',
            NameService__pb2.ServerData.SerializeToString,
            NameService__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnregisterServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/name_service.NameService/UnregisterServer',
            NameService__pb2.ServerName.SerializeToString,
            NameService__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LookupServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/name_service.NameService/LookupServer',
            NameService__pb2.ServerName.SerializeToString,
            NameService__pb2.ServerData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
